# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
[ -r /home/cjohnston/.byobu/prompt ] && . /home/cjohnston/.byobu/prompt   #byobu-prompt#
if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
        source /etc/profile.d/vte.sh
fi
export TERM=xterm-256color
alias vim='vim -p'
alias sl="ls"
export DEBFULLNAME="Chris Johnston"
export DEBEMAIL="chrisjohnston@ubuntu.com"
export GPGKEY="3CF3D1A5"
export DEBSIGN_KEYID=3CF3D1A5
alias kubens="kubectl config set-context --current --namespace"
alias microk8s-prod="kubectl config use-context microk8s-prod"
alias microk8s-dev="kubectl config use-context microk8s-dev"

# Colors
COLOR_RED_DARK="\033[0;31m"
COLOR_RED_LIGHT="\033[1;31m"
COLOR_GREEN_DARK="\033[0;32m"
COLOR_GREEN_LIGHT="\033[1;32m"
COLOR_YELLOW_DARK="\033[0;33m"
COLOR_YELLOW_LIGHT="\033[1;33m"
COLOR_BLUE_DARK="\033[0;34m"
COLOR_BLUE_LIGHT="\033[1;34m"
COLOR_PURPLE_DARK="\033[0;35m"
COLOR_PURPLE_LIGHT="\033[1;35m"
COLOR_AQUA_DARK="\033[0;36m"
COLOR_AQUA_LIGHT="\033[1;36m"
COLOR_WHITE_DARK="\033[0;37m"
COLOR_WHITE_LIGHT="\033[1;37m"
COLOR_ORANGE_DARK="\033[0;31m"
COLOR_RESET="\033[0m"

# Git terminal configs
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

function git_color {
  local git_status="$(git status 2> /dev/null)"
  if [[ $git_status =~ "Your branch is ahead of" ]]; then
    echo -e $COLOR_YELLOW_LIGHT
  elif [[ $git_status =~ "nothing to commit" ]]; then
    echo -e $COLOR_GREEN_LIGHT
  else
    echo -e $COLOR_RED_LIGHT
  fi
}

function git_branch {
  local git_status="$(git status 2> /dev/null)"
  local on_branch="On branch ([^${IFS}]*)"
  local on_commit="HEAD detached at ([^${IFS}]*)"
  if [[ $git_status =~ $on_branch ]]; then
    local branch=${BASH_REMATCH[1]}
    echo " ($branch)"
  elif [[ $git_status =~ $on_commit ]]; then
    local commit=${BASH_REMATCH[1]}
    echo " ($commit)"
  fi
}


# Kubectl terminal configs
function kubectl_color {
  local context=$(cat ~/.kube/config | grep "current-context:" | cut -d ':' -f 2)
  if [[ $context =~ "microk8s-prod" ]]; then
    echo -e $COLOR_PURPLE_LIGHT
  else
    echo -e $COLOR_BLUE_LIGHT
  fi
}

function kubectl_context {
  local context=$(cat ~/.kube/config | grep "current-context:" | cut -d ':' -f 2)
  echo "$context"
}

function kubectl_namespace {
  local namespace=$(kubectl config view --minify | grep namespace:)
  if [[ $namespace == "" ]]; then
    namespace="(?)"
  else
    # Strip "namespace:"
    namespace=$(echo $namespace | cut -d':' -f 2)
    # Strip front space
    namespace=${namespace:1}
  fi
  echo "($namespace)"
}

# PS1 config
PS1="\[$COLOR_GREEN_LIGHT\][\t] "
  PS1+="\[$COLOR_BLUE_DARK\]\u\[$COLOR_WHITE_DARK\]@\[$COLOR_ORANGE_DARK\]\h\[$COLOR_RESET\] "
  PS1+="\[$COLOR_AQUA_DARK\]\w"
  PS1+="\[\$(kubectl_color)\]"
  PS1+="\[\$(kubectl_context)\]"
  PS1+="\[$COLOR_YELLOW_DARK\]\$(kubectl_namespace)"
  PS1+="\[\$(git_color)\]"
  PS1+="\$(git_branch)"
  PS1+=" \[$COLOR_RESET\]\$ "

function ssh-auto-retry()
{
    false
    while [ $? -ne 0 ]; do
        ssh "$@" || (sleep 1;false)
    done
}
